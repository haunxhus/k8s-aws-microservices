
version: '3'

networks:
  e-network:
    driver: bridge
volumes:
  docker:
    driver: local

services:

  # #################################################### elasticsearch service #######################################################

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
    #image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    container_name: elasticsearch
    networks:
      - e-network
    ports:
      - 9200:9200
      - 9300:9300
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    environment:
      - discovery.type=single-node
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      #- cluster.initial_master_nodes=elasticsearch
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  # #################################################### logstash service #######################################################

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.3
    #image: docker.elastic.co/logstash/logstash:7.8.0
    container_name: logstash
    networks:
      - e-network
    restart: unless-stopped
    command: logstash -f /usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    volumes:
      - ./containerized-logstash/config:/usr/share/logstash/config:ro
      - ./containerized-logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - 5000:5000
      - 5044:5044
      - 12204:12204

      # #################################################### zipkin service #######################################################

      # zipkin:
      #   image: openzipkin/zipkin:latest
      #   container_name: zipkin
      # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
      #   environment:
      #   networks:
      #     - e-network
      #   depends_on:
      #     - logstash
      #   ports:
      # Port used for the Zipkin UI and HTTP Api
      #     - 9411:9411
      #   restart: on-failure

  zipkin:
    container_name: zipkin
    image: zipkin-server:v1.0.0
    build:
      context: .
      dockerfile: ./zipkin-server/Dockerfile
    networks:
      - e-network
    volumes:
      - ./zipkin-server:/usr/share/zipkin-server
    depends_on:
      - logstash
    entrypoint: ["./wait-for-services.sh", "logstash", "5000", "java", "-jar", "zipkin-server.jar"]
    ports:
      - 9411:9411
    restart: on-failure

    # #################################################### kibana service #######################################################

  kibana:
    #image: docker.elastic.co/kibana/kibana:7.8.0
    image: docker.elastic.co/kibana/kibana:8.5.3
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: on-failure
    networks:
      - e-network

  # #################################################### containerized-discovery service #######################################################

  discovery:
    container_name: containerized-discovery
    image: containerized-discovery:v1.0.0
    build:
      context: .
      # in ubuntu environment must have ./
      # dockerfile: ./containerized-discovery/Dockerfile
      dockerfile: ./containerized-discovery/Dockerfile
    networks:
      - e-network
    depends_on:
      - zipkin
      - logstash
    # command: ["wait-for-services.sh", "zipkin", "9411", "java",  "-jar", "containerized-discovery.jar"]
    ports:
      - 8761:8761
    restart: on-failure
    stdin_open: true # connect docker container by shell: docker run -i
    tty: true # connect docker container by shell:        docker run -i

  # ################################################ containerized-config-server ############################################################

  containerized-config-server:
    container_name: containerized-config-server
    image: containerized-config-server:v1.0.0
    build:
      context: .
      dockerfile: ./containerized-config-server/Dockerfile
    depends_on:
      - logstash
      - zipkin
      - discovery
    entrypoint: ["./wait-for-services.sh", "discovery", "8761", "java", "-jar", "containerized-config-server.jar"]
    networks:
      - e-network
    volumes:
      - ./wait-for-services.sh:/usr/local/bin/wait-for-services.sh # :ro, ro = read only
    ports:
      - 8888:8888
    restart: on-failure
    stdin_open: true


    # #################################################### containerized-products service #######################################################

  containerized-products:
    container_name: containerized-products
    image: containerized-products:v1.0.0
    build:
      context: .
      dockerfile: ./containerized-products/Dockerfile
    networks:
      - e-network
    volumes:
      - ./wait-for-services.sh:/usr/local/bin/wait-for-services.sh # :ro, ro = read only
      - ./wait-for-multi-services.sh:/usr/local/bin/wait-for-multi-services.sh
    depends_on:
      - logstash
      - zipkin
      - discovery
      - containerized-config-server
    entrypoint: ["./wait-for-multi-services.sh", "discovery", "8761", "containerized-config-server", "8888", "java", "-jar", "containerized-products.jar"]
    ports:
      - 2227:2227
    restart: on-failure
    stdin_open: true
    tty: true

  # #################################################### containerized-gateway service #######################################################

  containerized-gateway:
    container_name: containerized-gateway
    image: containerized-gateway:v1.0.0
    build:
      context: .
      dockerfile: ./containerized-gateway/Dockerfile
    networks:
      - e-network
    volumes:
      - "./wait-for-services.sh:/usr/local/bin/wait-for-services.sh:ro" # :ro, ro = read only
      - "./wait-for-multi-services.sh:/usr/local/bin/wait-for-multi-services.sh"
    depends_on:
      - logstash
      - zipkin
      - discovery
      - containerized-config-server
    entrypoint: ["./wait-for-multi-services.sh", "discovery", "8761", "containerized-config-server", "8888", "java", "-jar", "containerized-gateway.jar"]
    ports:
      - 8762:8762
    restart: on-failure
    stdin_open: true
    tty: true

    # #################################################### containerized-accounts service #######################################################

  containerized-accounts:
    container_name: containerized-accounts
    image: containerized-accounts:v1.0.0
    build:
      context: .
      dockerfile: ./containerized-accounts/Dockerfile
    networks:
      - e-network
    volumes:
      - ./wait-for-services.sh:/usr/local/bin/wait-for-services.sh # :ro, ro = read only
      - ./wait-for-multi-services.sh:/usr/local/bin/wait-for-multi-services.sh
    depends_on:
      - logstash
      - zipkin
      - discovery
      - containerized-config-server
    entrypoint: ["./wait-for-multi-services.sh", "discovery", "8761", "containerized-config-server", "8888", "java", "-jar", "containerized-accounts.jar"]
    ports:
      - 2222:2222
    restart: on-failure
    stdin_open: true
    tty: true



  # #################################################### containerized-orders service #######################################################

  containerized-orders:
    container_name: containerized-orders
    image: containerized-orders:v1.0.0
    build:
      context: .
      dockerfile: ./containerized-orders/Dockerfile
    networks:
      - e-network
    volumes:
      - ./wait-for-services.sh:/usr/local/bin/wait-for-services.sh # :ro, ro = read only
      - ./wait-for-multi-services.sh:/usr/local/bin/wait-for-multi-services.sh
    depends_on:
      - logstash
      - zipkin
      - discovery
      - containerized-config-server
    entrypoint: ["./wait-for-multi-services.sh", "discovery", "8761", "containerized-config-server", "8888", "java", "-jar", "containerized-orders.jar"]
    ports:
      - 2226:2226
    restart: on-failure
    stdin_open: true
    tty: true


    # #################################################### containerized-main service #######################################################

  containerized-main:
    container_name: containerized-main
    image: containerized-main:v1.0.0
    build:
      context: .
      dockerfile: ./containerized-main/Dockerfile
    networks:
      - e-network
    volumes:
      - ./wait-for-services.sh:/usr/local/bin/wait-for-services.sh:ro#, ro = read only
      - ./wait-for-multi-services.sh:/usr/local/bin/wait-for-multi-services.sh
    depends_on:
      - logstash
      - zipkin
      - discovery
      - containerized-config-server
    entrypoint: ["./wait-for-multi-services.sh", "discovery", "8761", "containerized-config-server", "8888",  "java", "-jar", "containerized-main.jar"]
    ports:
      - 2223:2223
    restart: on-failure
    stdin_open: true
    tty: true


  containerized-authorization-server:
    container_name: containerized-authorization-server
    image: containerized-authorization-server
    build:
      context: .
      dockerfile: ./containerized-authorization-server/Dockerfile
    networks:
      - e-network
    environment:
      - ISSUER_HOST=containerized-authorization-server #this env must be matched with the containerized-gateway service
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=user_registration
      - DB_PASSWORD=vmodev
      - DB_USERNAME=vmodev
    #    volumes:
    #      - ./wait-for-services.sh:/usr/local/bin/wait-for-services.sh # :ro, ro = read only
    #    entrypoint: ["./wait-for-services.sh", "discovery", "8761", "java", "-jar", "containerized-authorization-server.jar"]
    entrypoint: ["java", "-jar", "containerized-authorization-server.jar"]
    ports:
      - "9000:9000"
    depends_on:
      - db
    restart: on-failure
    stdin_open: true
    tty: true

  db:
    container_name: mysql8
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    #    command: mysqld --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - e-network
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user_registration
      #      MYSQL_USER: vmodev
      #      MYSQL_PASSWORD: vmodev
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    ports:
      - "3306:3306"
    volumes:
      - './docker/db/data:/var/lib/mysql'
      - './docker/db/my.cnf:/etc/mysql/conf.d/my.cnf'
      - './docker/db/sql:/docker-entrypoint-initdb.d'
#      - './assets/user_Create.sql:/docker-entrypoint-initdb.d/user_Create.sql:ro'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - e-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - e-network

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      - e-network

  redis-commander:
    container_name: redis-commander
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - 8081:8081
    networks:
      - e-network