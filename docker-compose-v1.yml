
version: '3'

networks:
    e-network:
        driver: bridge
 
services:

  # #################################################### elasticsearch service ####################################################### 
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
    #image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    container_name: elasticsearch
    networks:
      - e-network
    ports:
      - 9200:9200
      - 9300:9300
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    environment:
      - discovery.type=single-node
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      #- cluster.initial_master_nodes=elasticsearch
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      
  # #################################################### logstash service #######################################################    
  
  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.3
    #image: docker.elastic.co/logstash/logstash:7.8.0
    container_name: logstash
    networks:
      - e-network
    restart: unless-stopped
    command: logstash -f /usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    volumes:
      - ./containerized-logstash/config:/usr/share/logstash/config:ro
      - ./containerized-logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - 5000:5000
      - 5044:5044
      - 12204:12204
      
  # #################################################### zipkin service #######################################################     
  
 # zipkin:
 #   image: openzipkin/zipkin:latest
 #   container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
 #   environment:
 #   networks:
 #     - e-network
 #   depends_on:
 #     - logstash
 #   ports:
      # Port used for the Zipkin UI and HTTP Api
 #     - 9411:9411
 #   restart: on-failure     
      
  zipkin:
    container_name: zipkin
    image: zipkin-server
    build: 
        context: .
        dockerfile: ./zipkin-server/Dockerfile
    networks:
       - e-network
    volumes:
      - ./zipkin-server:/usr/share/zipkin-server
    depends_on:
      - logstash
    entrypoint: ["./wait-for-services.sh", "logstash", "5000", "java", "-jar", "zipkin-server.jar"]
    ports:
       - 9411:9411
    restart: on-failure
 
 # #################################################### kibana service #######################################################      
    
  kibana:
    #image: docker.elastic.co/kibana/kibana:7.8.0
    image: docker.elastic.co/kibana/kibana:8.5.3
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: on-failure
    networks:
      - e-network

 # #################################################### containerized-discovery service #######################################################  
 
  discovery:
    container_name: containerized-discovery
    image: containerized-discovery
    build: 
      context: .
      # in ubuntu environment must have ./
      # dockerfile: ./containerized-discovery/Dockerfile
      dockerfile: ./containerized-discovery/Dockerfile
    networks:
      - e-network
    depends_on:
      - zipkin
      - logstash
   # command: ["wait-for-services.sh", "zipkin", "9411", "java",  "-jar", "containerized-discovery.jar"]
    ports:
      - 8761:8761
    restart: on-failure
    stdin_open: true # connect docker container by shell: docker run -i
    tty: true # connect docker container by shell:        docker run -i
 
 # #################################################### containerized-products service #######################################################   
    
  containerized-products:
    container_name: containerized-products
    image: containerized-products
    build: 
      context: .
      dockerfile: ./containerized-products/Dockerfile
    networks:
      - e-network
    volumes:
      - ./wait-for-services.sh:/usr/local/bin/wait-for-services.sh # :ro, ro = read only
    depends_on:
      - logstash
      - zipkin
      - discovery
    entrypoint: ["./wait-for-services.sh", "discovery", "8761", "java", "-jar", "containerized-products.jar"]
    ports:
      - 2227:2227
    restart: on-failure
    stdin_open: true
    tty: true
    
 # #################################################### containerized-gateway service #######################################################   
    
  containerized-gateway:
    container_name: containerized-gateway
    image: containerized-gateway
    build: 
      context: .
      dockerfile: ./containerized-gateway/Dockerfile
    networks:
      - e-network
    volumes:
      - "./wait-for-services.sh:/usr/local/bin/wait-for-services.sh:ro" # :ro, ro = read only
    depends_on:
      - logstash
      - zipkin
      - discovery
    entrypoint: ["./wait-for-services.sh", "discovery", "8761", "java", "-jar", "containerized-gateway.jar"]
    ports:
      - 8762:8762
    restart: on-failure
    stdin_open: true 
    tty: true
    
 # #################################################### containerized-accounts service #######################################################   
    
  containerized-accounts:
    container_name: containerized-accounts
    image: containerized-accounts
    build: 
      context: .
      dockerfile: ./containerized-accounts/Dockerfile
    networks:
      - e-network
    volumes:
      - ./wait-for-services.sh:/usr/local/bin/wait-for-services.sh # :ro, ro = read only
    depends_on:
      - logstash
      - zipkin
      - discovery
    entrypoint: ["./wait-for-services.sh", "discovery", "8761", "java", "-jar", "containerized-accounts.jar"]
    ports:
      - 2222:2222
    restart: on-failure
    stdin_open: true 
    tty: true    



 # #################################################### containerized-orders service #######################################################   
    
  containerized-orders:
    container_name: containerized-orders
    image: containerized-orders
    build: 
      context: .
      dockerfile: ./containerized-orders/Dockerfile
    networks:
      - e-network
    volumes:
      - ./wait-for-services.sh:/usr/local/bin/wait-for-services.sh # :ro, ro = read only
    depends_on:
      - logstash
      - zipkin
      - discovery
    entrypoint: ["./wait-for-services.sh", "discovery", "8761", "java", "-jar", "containerized-orders.jar"]
    ports:
      - 2226:2226
    restart: on-failure
    stdin_open: true 
    tty: true
    
    
 # #################################################### containerized-main service #######################################################   
    
  containerized-main:
    container_name: containerized-main
    image: containerized-main
    build: 
      context: .
      dockerfile: ./containerized-main/Dockerfile
    networks:
      - e-network
    volumes:
      - ./wait-for-services.sh:/usr/local/bin/wait-for-services.sh # :ro, ro = read only
    depends_on:
      - logstash
      - zipkin
      - discovery
    entrypoint: ["./wait-for-services.sh", "discovery", "8761", "java", "-jar", "containerized-main.jar"]
    ports:
      - 2223:2223
    restart: on-failure
    stdin_open: true 
    tty: true